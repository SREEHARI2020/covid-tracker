{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/Index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","image.png","App.js","reportWebVitals.js","index.js","App.module.css","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changeableUrl","axios","get","console","log","fetchDailyData","modifiedData","map","daily","total","date","reportDate","fetchCountries","countries","CountryData","name","Chart","useState","dailyData","setDailyData","useEffect","fetchApi","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","handleChange","setCountry","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","count","i","App","setData","fetch","image","height","src","coronaImage","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8188bcc8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__2N6D4\",\"card\":\"Cards_card__1Nzor\",\"infected\":\"Cards_infected__20TS1\",\"recovered\":\"Cards_recovered__3eC92\",\"deaths\":\"Cards_deaths__3UoFi\"};","import React from 'react'\r\nimport{Card,CardContent,Typography,Grid} from '@material-ui/core';\r\nimport styles from './Cards.module.css'\r\nimport CountUp from 'react-countup'\r\nimport cx from 'classnames';\r\n\r\n const Cards = ({data:{confirmed,recovered,deaths,lastUpdate}}) => {\r\n     \r\n     if(!confirmed) {\r\n         // ifconfirmed is notdefined every other value will be not defined\r\n        return 'Loading...';\r\n     }\r\n\r\n         return (\r\n        <div className={styles.container}>\r\n            <Grid container spacing={3} justify=\"center\">\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card,styles.infected)}>\r\n                    <CardContent>\r\n \r\n                        <Typography color=\"textSecondary\" gutterBottom>Infected</Typography>\r\n                        <Typography variant=\"h5\" gutterBottom><CountUp start={0}\r\n                        end={confirmed.value} duration={2.5} separator=\",\"/></Typography>\r\n                        <Typography color=\"textSecondary\" gutterBottom>{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\" gutterBottom>Number of active Cases </Typography>\r\n                    </CardContent>\r\n\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card,styles.recovered)}>\r\n                    <CardContent>\r\n \r\n                        <Typography color=\"textSecondary\" gutterBottom>Recovered</Typography>\r\n                        <Typography variant=\"h5\" gutterBottom><CountUp start={0}\r\n                        end={recovered.value} duration={2.5} separator=\",\"/></Typography>\r\n                      <Typography color=\"textSecondary\" gutterBottom>{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\" gutterBottom>Number of recoveries from covid-19 </Typography>\r\n                    </CardContent>\r\n\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card,styles.deaths)}>\r\n                    <CardContent>\r\n \r\n                        <Typography color=\"textSecondary\" gutterBottom>Deaths</Typography>\r\n                        <Typography variant=\"h5\" gutterBottom><CountUp start={0}\r\n                        end={deaths.value} duration={2.5} separator=\",\"/></Typography>\r\n                       <Typography color=\"textSecondary\" gutterBottom>{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\" gutterBottom>Number of deaths caused by covid-19 </Typography>\r\n                    </CardContent>\r\n\r\n                </Grid>\r\n\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default  Cards;","import React from 'react';\r\nimport axios from 'axios';\r\nconst url='https://covid19.mathdro.id/api';\r\n\r\n\r\n\r\n\r\nexport const fetchData = async(country) => {\r\n\r\n    let changeableUrl=url;\r\n    if(country){\r\n        changeableUrl=`${url}/countries/${country}`;\r\n    }\r\n\r\n    try{\r\n\r\n        const {data:{confirmed,recovered,deaths,lastUpdate}}=await axios.get(changeableUrl);\r\n        return {confirmed,recovered,deaths,lastUpdate}\r\n    }\r\n    catch(error){\r\n        console.log(error)\r\n\r\n    }\r\n\r\n}\r\nexport const fetchDailyData=async()=>{\r\n\r\n    try{\r\n        const {data}=await axios.get(`${url}/daily`);\r\n        const modifiedData= data.map((daily)=>({\r\n            confirmed:daily.confirmed.total,\r\n            deaths:daily.deaths.total,\r\n            date:daily.reportDate,\r\n        }))\r\n        \r\n       \r\n      \r\n        return modifiedData\r\n        \r\n\r\n    }\r\n    catch(error){\r\n        console.log(error)\r\n\r\n    }\r\n\r\n}\r\n\r\nexport const fetchCountries=async()=>{\r\n\r\n    try{\r\n        const {data:{countries}}=await axios.get(`${url}/countries`);\r\n        const CountryData= countries.map((country)=>(country.name ))\r\n        \r\n       \r\n      \r\n         return CountryData;\r\n       \r\n        \r\n\r\n    }\r\n    catch(error){\r\n        console.log(error)\r\n\r\n    }\r\n\r\n}","import React,{useState,useEffect} from 'react'\r\nimport {fetchDailyData} from '../../api/Index';\r\nimport{Line,Bar} from 'react-chartjs-2';\r\nimport styles from './Chart.module.css'\r\n\r\n\r\n const Chart = ({country,data:{confirmed,recovered,deaths}}) => {\r\n     const[dailyData,setDailyData]=useState([]);\r\n\r\n     useEffect(()=>{\r\n         const fetchApi =async()=>{\r\n            \r\n           setDailyData(await fetchDailyData());\r\n         }\r\n       \r\n\r\n         fetchApi();\r\n        \r\n     }\r\n     ,[]);\r\n     const lineChart=(dailyData.length?\r\n        (<Line data={\r\n            {\r\n                labels:dailyData.map(({date})=>date),\r\n                datasets:[{\r\n\r\n                   data: dailyData.map(({confirmed})=>confirmed),\r\n                   label:'Infected',\r\n                   borderColor:'#3333ff',\r\n                   fill:true\r\n\r\n                },{\r\n                    data: dailyData.map(({deaths})=>deaths),\r\n                    label:'Deaths',\r\n                    borderColor:'red',\r\n                    backgroundColor:'rgba(255,0,0,0.5)',\r\n                    fill:true\r\n \r\n\r\n\r\n                }],\r\n            }}\r\n        \r\n        />):null);\r\nconst barChart=(\r\nconfirmed?\r\n<Bar\r\ndata={{\r\n\r\n    labels:['Infected','Recovered','Deaths'],\r\n    datasets:[{\r\n        label:'People',\r\n        backgroundColor:['rgba(0,0,255,0.5)','rgba(0,255,0,0.5)','rgba(255,0,0,0.5)'],\r\n        data:[confirmed.value,recovered.value,deaths.value]\r\n    }]\r\n}}\r\noptions={{\r\n    legend:{display:false},\r\n    title:{display:true,text:`current state in ${country}`}\r\n}}\r\n\r\n/>\r\n\r\n\r\n:null\r\n\r\n);\r\n\r\n\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n      {country?barChart:lineChart}\r\n         \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chart","import React,{useState,useEffect} from 'react';\r\nimport {NativeSelect,FormControl} from '@material-ui/core';\r\nimport {fetchCountries} from '../../api/Index';\r\nimport styles from './CountryPicker.module.css';\r\n\r\n\r\n\r\n const CountryPicker = ({handleChange}) => {\r\n\r\nconst [country, setCountry] = useState([])\r\nuseEffect(()=>{\r\nconst fetchApi=async()=>{\r\n    setCountry(await fetchCountries());\r\n\r\n}\r\nfetchApi();\r\n\r\n\r\n  \r\n\r\n},[country])\r\n\r\n\r\n    return (\r\n       <FormControl className={styles.formControl}>\r\n           <NativeSelect defaultValue=\"\" onChange={(e)=>handleChange(e.target.value)}>\r\n               <option value=\"\">Global</option>\r\n               {country.map((count,i)=>(<option key={i} value={count}>{count}</option>))}\r\n           </NativeSelect>\r\n\r\n\r\n       </FormControl>\r\n    )\r\n}\r\n\r\nexport default CountryPicker","export default __webpack_public_path__ + \"static/media/image.4cc7a88b.png\";","import React,{useEffect,useState} from 'react'\nimport './App.css';\nimport{Cards,Chart,CountryPicker} from './components/Index';\nimport styles from './App.module.css';\nimport { fetchData } from './api/Index';\nimport coronaImage from './image.png'\n\nfunction App() {\n  const[data,setData]=useState({})\n  const[country,setCountry]=useState('')\n\nuseEffect(() => {\n  const fetch=async()=>{\n    const data= await fetchData();\n    setData(data);\n\n  }\n\n  fetch();\n \n}, [])\nconst handleChange=async(count)=>{\n\nsetCountry(count)\nconst data= await fetchData(count);\nsetData(data);\n\n}\n\n  return (\n    <div className={styles.container}>\n      <img className={styles.image} height='200px'  src={coronaImage} alt='Covid-19'/>\n     <Cards data={data}/>\n     <CountryPicker handleChange={handleChange}/>\n     <Chart data={data} country={country}/>\n   \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__3xOJ_\",\"image\":\"App_image__3sis1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__2EUlq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__21wrn\"};"],"sourceRoot":""}